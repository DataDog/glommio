name: CI

on:
  pull_request:
    branches: [ master ]
    types: [ "opened", "synchronize" ]
  push:
    branches: [ master ]

jobs:
  fmt:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache setup
        uses: ./.github/actions/cache-setup

      - name: Install nightly for rustfmt features
        run: |
          FMT_NIGHTLY=nightly-$(curl -s https://rust-lang.github.io/rustup-components-history/x86_64-unknown-linux-gnu/rustfmt)
          rustup install nightly
          rustup default "$FMT_NIGHTLY"
          rustup component add rustfmt

      - name: Check formatting
        run: cargo fmt --all -- --check

  doc:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache setup
        uses: ./.github/actions/cache-setup

      - name: Install cargo-deadlinks
        run: cargo install cargo-deadlinks

      - name: Generate documentation
        run: cargo doc --all-features

    # temporarily disabled.
    # - name: Validate links
    #   run: cargo deadlinks --dir target/doc/glommio

  third-party:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install cargo-license
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-license
          version: latest
          use-tool-cache: true

      - name: Run checks on third-party dependencies
        uses: EmbarkStudios/cargo-deny-action@v1
        with:
          log-level: warn
          command: check
          arguments: --all-features

      - name: Assert third-party crates are listed correctly in `LICENSE-3rdparty.csv`
        run: |
          cargo license --all-features -a -j --no-deps -d | jq -r '(["Component","Origin","License","Copyright"]) as $cols | map(. as $row | ["name", "repository", "license", "authors"] | map($row[.])) as $rows | $cols, $rows[] | @csv' > LICENSE-3rdparty.csv.ci
          cmp LICENSE-3rdparty.csv LICENSE-3rdparty.csv.ci

  clippy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache setup
        uses: ./.github/actions/cache-setup

      - name: Run linters
        run: cargo clippy --all-targets --all-features -- -D warnings

  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache setup
        uses: ./.github/actions/cache-setup

      - name: Build all targets
        run: cargo build --all --all-targets --all-features

  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache setup
        uses: ./.github/actions/cache-setup

      - name: Test all targets
        run: sudo bash -c "ulimit -Sl 512 && ulimit -Hl 512 && PATH=$PATH:/usr/share/rust/.cargo/bin && RUSTUP_TOOLCHAIN=stable cargo test --all-features"
